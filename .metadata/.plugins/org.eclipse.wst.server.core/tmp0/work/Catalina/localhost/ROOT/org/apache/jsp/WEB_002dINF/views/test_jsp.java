/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.90
 * Generated at: 2024-07-08 07:55:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \r\n");
      out.write("\"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("#modDiv {\r\n");
      out.write("	width: 300px;\r\n");
      out.write("	height: 100px;\r\n");
      out.write("	background-color: gray;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 50%;\r\n");
      out.write("	left: 50%;\r\n");
      out.write("	margin-top: -50px;\r\n");
      out.write("	margin-left: -150px;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	z-index: 1000;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".pagination {\r\n");
      out.write("  width: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".pagination li{\r\n");
      out.write("  list-style: none;\r\n");
      out.write("  float: left; \r\n");
      out.write("  padding: 3px; \r\n");
      out.write("  border: 1px solid blue;\r\n");
      out.write("  margin:3px;  \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".pagination li a{\r\n");
      out.write("  margin: 3px;\r\n");
      out.write("  text-decoration: none;  \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div id='modDiv' style=\"display: none;\">\r\n");
      out.write("		<div class='modal-title'></div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<input type='text' id='replytext'>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<button type=\"button\" id=\"replyModBtn\">Modify</button>\r\n");
      out.write("			<button type=\"button\" id=\"replyDelBtn\">DELETE</button>\r\n");
      out.write("			<button type=\"button\" id='closeBtn'>Close</button>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<h2>Ajax Test Page</h2>\r\n");
      out.write("\r\n");
      out.write("	<div>\r\n");
      out.write("		<div>\r\n");
      out.write("			REPLYER <input type='text' name='replyer' id='newReplyWriter'>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			REPLY TEXT <input type='text' name='replytext' id='newReplyText'>\r\n");
      out.write("		</div>\r\n");
      out.write("		<button id=\"replyAddBtn\">ADD REPLY</button>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<ul id=\"replies\">\r\n");
      out.write("	</ul>\r\n");
      out.write("	\r\n");
      out.write("	<ul class='pagination'>\r\n");
      out.write("	</ul>	\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<!-- jQuery 2.1.4 -->\r\n");
      out.write("	<script src=\"/resources/plugins/jQuery/jQuery-2.1.4.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("	\r\n");
      out.write("		var bno = 3;\r\n");
      out.write("		\r\n");
      out.write("		getPageList(1);\r\n");
      out.write("\r\n");
      out.write("		function getAllList() {\r\n");
      out.write("\r\n");
      out.write("			$\r\n");
      out.write("					.getJSON(\r\n");
      out.write("							\"/replies/all/\" + bno,\r\n");
      out.write("							function(data) {\r\n");
      out.write("\r\n");
      out.write("								//console.log(data.length);\r\n");
      out.write("\r\n");
      out.write("								var str = \"\";\r\n");
      out.write("\r\n");
      out.write("								$(data)\r\n");
      out.write("										.each(\r\n");
      out.write("												function() {\r\n");
      out.write("													str += \"<li data-rno='\"+this.rno+\"' class='replyLi'>\"\r\n");
      out.write("															+ this.rno\r\n");
      out.write("															+ \":\"\r\n");
      out.write("															+ this.replytext\r\n");
      out.write("															+ \"<button>MOD</button></li>\";\r\n");
      out.write("												});\r\n");
      out.write("\r\n");
      out.write("								$(\"#replies\").html(str);\r\n");
      out.write("							});\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		$(\"#replyAddBtn\").on(\"click\", function() {\r\n");
      out.write("\r\n");
      out.write("			var replyer = $(\"#newReplyWriter\").val();\r\n");
      out.write("			var replytext = $(\"#newReplyText\").val();\r\n");
      out.write("\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type : 'post',\r\n");
      out.write("				url : '/replies',\r\n");
      out.write("				headers : {\r\n");
      out.write("					\"Content-Type\" : \"application/json\",\r\n");
      out.write("					\"X-HTTP-Method-Override\" : \"POST\"\r\n");
      out.write("				},\r\n");
      out.write("				dataType : 'text',\r\n");
      out.write("				data : JSON.stringify({\r\n");
      out.write("					bno : bno,\r\n");
      out.write("					replyer : replyer,\r\n");
      out.write("					replytext : replytext\r\n");
      out.write("				}),\r\n");
      out.write("				success : function(result) {\r\n");
      out.write("\r\n");
      out.write("					if (result == 'SUCCESS') {\r\n");
      out.write("\r\n");
      out.write("						alert(\"등록 되었습니다.\");\r\n");
      out.write("						getAllList();\r\n");
      out.write("\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		$(\"#replies\").on(\"click\", \".replyLi button\", function() {\r\n");
      out.write("\r\n");
      out.write("			var reply = $(this).parent();\r\n");
      out.write("\r\n");
      out.write("			var rno = reply.attr(\"data-rno\");\r\n");
      out.write("			var replytext = reply.text();\r\n");
      out.write("\r\n");
      out.write("			$(\".modal-title\").html(rno);\r\n");
      out.write("			$(\"#replytext\").val(replytext);\r\n");
      out.write("			$(\"#modDiv\").show(\"slow\");\r\n");
      out.write("\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		$(\"#replyDelBtn\").on(\"click\", function() {\r\n");
      out.write("\r\n");
      out.write("			var rno = $(\".modal-title\").html();\r\n");
      out.write("			var replytext = $(\"#replytext\").val();\r\n");
      out.write("\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type : 'delete',\r\n");
      out.write("				url : '/replies/' + rno,\r\n");
      out.write("				headers : {\r\n");
      out.write("					\"Content-Type\" : \"application/json\",\r\n");
      out.write("					\"X-HTTP-Method-Override\" : \"DELETE\"\r\n");
      out.write("				},\r\n");
      out.write("				dataType : 'text',\r\n");
      out.write("				success : function(result) {\r\n");
      out.write("					console.log(\"result: \" + result);\r\n");
      out.write("					if (result == 'SUCCESS') {\r\n");
      out.write("						alert(\"삭제 되었습니다.\");\r\n");
      out.write("						$(\"#modDiv\").hide(\"slow\");\r\n");
      out.write("						getAllList();\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		$(\"#replyModBtn\").on(\"click\",function(){\r\n");
      out.write("			  \r\n");
      out.write("			  var rno = $(\".modal-title\").html();\r\n");
      out.write("			  var replytext = $(\"#replytext\").val();\r\n");
      out.write("			  \r\n");
      out.write("			  $.ajax({\r\n");
      out.write("					type:'put',\r\n");
      out.write("					url:'/replies/'+rno,\r\n");
      out.write("					headers: { \r\n");
      out.write("					      \"Content-Type\": \"application/json\",\r\n");
      out.write("					      \"X-HTTP-Method-Override\": \"PUT\" },\r\n");
      out.write("					data:JSON.stringify({replytext:replytext}), \r\n");
      out.write("					dataType:'text', \r\n");
      out.write("					success:function(result){\r\n");
      out.write("						console.log(\"result: \" + result);\r\n");
      out.write("						if(result == 'SUCCESS'){\r\n");
      out.write("							alert(\"수정 되었습니다.\");\r\n");
      out.write("							 $(\"#modDiv\").hide(\"slow\");\r\n");
      out.write("							//getAllList();\r\n");
      out.write("							 getPageList(replyPage);\r\n");
      out.write("						}\r\n");
      out.write("				}});\r\n");
      out.write("		});		\r\n");
      out.write("		\r\n");
      out.write("		function getPageList(page){\r\n");
      out.write("			\r\n");
      out.write("		  $.getJSON(\"/replies/\"+bno+\"/\"+page , function(data){\r\n");
      out.write("			  \r\n");
      out.write("			  console.log(data.list.length);\r\n");
      out.write("			  \r\n");
      out.write("			  var str =\"\";\r\n");
      out.write("			  \r\n");
      out.write("			  $(data.list).each(function(){\r\n");
      out.write("				  str+= \"<li data-rno='\"+this.rno+\"' class='replyLi'>\" \r\n");
      out.write("				  +this.rno+\":\"+ this.replytext+\r\n");
      out.write("				  \"<button>MOD</button></li>\";\r\n");
      out.write("			  });\r\n");
      out.write("			  \r\n");
      out.write("			  $(\"#replies\").html(str);\r\n");
      out.write("			  \r\n");
      out.write("			  printPaging(data.pageMaker);\r\n");
      out.write("			  \r\n");
      out.write("		  });\r\n");
      out.write("	  }		\r\n");
      out.write("		\r\n");
      out.write("		  \r\n");
      out.write("		function printPaging(pageMaker){\r\n");
      out.write("			\r\n");
      out.write("			var str = \"\";\r\n");
      out.write("			\r\n");
      out.write("			if(pageMaker.prev){\r\n");
      out.write("				str += \"<li><a href='\"+(pageMaker.startPage-1)+\"'> << </a></li>\";\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			for(var i=pageMaker.startPage, len = pageMaker.endPage; i <= len; i++){				\r\n");
      out.write("					var strClass= pageMaker.cri.page == i?'class=active':'';\r\n");
      out.write("				  str += \"<li \"+strClass+\"><a href='\"+i+\"'>\"+i+\"</a></li>\";\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			if(pageMaker.next){\r\n");
      out.write("				str += \"<li><a href='\"+(pageMaker.endPage + 1)+\"'> >> </a></li>\";\r\n");
      out.write("			}\r\n");
      out.write("			$('.pagination').html(str);				\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		var replyPage = 1;\r\n");
      out.write("		\r\n");
      out.write("		$(\".pagination\").on(\"click\", \"li a\", function(event){\r\n");
      out.write("			\r\n");
      out.write("			event.preventDefault();\r\n");
      out.write("			\r\n");
      out.write("			replyPage = $(this).attr(\"href\");\r\n");
      out.write("			\r\n");
      out.write("			getPageList(replyPage);\r\n");
      out.write("			\r\n");
      out.write("		});		\r\n");
      out.write("	  		\r\n");
      out.write("	  		\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
